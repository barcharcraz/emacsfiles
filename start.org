#+property: header-args :tangle yes :results silent
* Header
** configuration
*** encodings
#+begin_src emacs-lisp
  (prefer-coding-system 'utf-8)
#+end_src
*** custom file
#+begin_src emacs-lisp
(setq custom-file (expand-file-name "custom.el" user-emacs-directory))
(when (file-exists-p custom-file)
  (load custom-file))
#+end_src
*** package.el
    :properties:
    :header-args: :tangle yes
    :end:
#+begin_src emacs-lisp
  (require 'package)
  (add-to-list 'package-archives
               '("melpa" . "https://melpa.org/packages/") t)
  (add-to-list 'package-archives
               '("org" . "https://orgmode.org/elpa/") t)
#+end_src
 
*** use-package
**** package.el mode
     :properties:
     :header-args: :tangle yes
     :end:
#+begin_src emacs-lisp
(unless package-archive-contents
  (package-refresh-contents))

(unless (package-installed-p 'use-package)
  (package-install 'use-package))

(setq use-package-always-ensure t)
#+end_src
* packages
** use-package
#+begin_src emacs-lisp
(use-package use-package)
#+end_src
*** use-package-chords
#+begin_src emacs-lisp
  (use-package use-package-chords
    :config (key-chord-mode 1))
#+end_src
** no littering 
#+begin_src emacs-lisp
  (use-package no-littering)
#+end_src
** evil
#+begin_src emacs-lisp
(use-package evil
	     :config (evil-mode 1))
#+end_src
*** evil plugins
**** evil-org
#+begin_src emacs-lisp
  (use-package evil-org
    :after org
    :hook
    (org-mode . evil-org-mode)
    (evil-org-mode . evil-org-set-key-theme)
    :requires evil-org-agenda
    :config (evil-org-agenda-set-keys))
#+end_src
**** evil-magit
#+BEGIN_SRC emacs-lisp
(use-package evil-magit)
#+END_SRC
** emamux
This package lets us send commands to tmux, it's very handy
#+BEGIN_SRC emacs-lisp
  (use-package emamux
    :bind-keymap (("C-`" . emamux:keymap))
    :chords (("``" . emamux:send-region)))
#+END_SRC
** org
   :properties:
   :header-args: :tangle yes
   :end:
#+begin_src emacs-lisp
  (use-package org
    :hook
    (org-mode . org-indent-mode)
    :config
    (require 'org-mouse)
    :custom (org-src-fontify-natively t)
    :ensure org-plus-contrib)
#+end_src
*** ob-async
This allows task execution in parrallel
#+BEGIN_SRC emacs-lisp
(use-package ob-async)
#+END_SRC
** htmlize
#+begin_src emacs-lisp	
  (use-package htmlize)
#+end_src
** ivy
#+begin_src emacs-lisp
  (use-package ivy
    :config (ivy-mode)
    :custom
    (ivy-use-virtual-buffers t)
    (ivy-count-format "(%d/%d) "))
#+end_src
*** ivy-gitlab
#+begin_src emacs-lisp
  (use-package ivy-gitlab)
#+end_src
** counsel
#+begin_src emacs-lisp
  (use-package counsel
    :config (counsel-mode))
#+end_src
*** counsel plugins
**** projectile
#+begin_src emacs-lisp
  (use-package counsel-projectile
    :config (counsel-projectile-mode))
#+end_src
** which key
#+begin_src emacs-lisp
  (use-package which-key
    :config (which-key-mode))
#+end_src
** projectile
#+begin_src emacs-lisp
  (use-package projectile
    :config (projectile-mode))
#+end_src
** rainbow delimeters
#+begin_src emacs-lisp
  (use-package rainbow-delimiters
    :hook
    (c-mode . rainbow-delimeters-mode)
    (c++-mode . rainbow-delimeters-mode)
    (python-mode . rainbow-delimeters-mode))
#+end_src
** company
#+begin_src emacs-lisp
  (use-package company
    :config
    (global-company-mode)
    :custom
    (company-idle-delay 0)
    (company-minimum-prefix-length 2)
    :bind
    ("C-SPC" . company-complete))
#+end_src
*** irony
#+BEGIN_SRC emacs-lisp
  (use-package company-irony)
#+END_SRC
*** irony-c-headers
This is like [[c-headers]] but integrates with irony-mode
#+begin_src emacs-lisp
  (use-package company-irony-c-headers
    :after (irony)
    :config
    (add-to-list 'company-backends '(company-irony-c-headers company-irony)))
#+end_src
*** c-headers
#+begin_src emacs-lisp :tangle no
  (use-package company-c-headers
    :after (company-irony-c-headers)
    :config
    (add-to-list 'company-backends 'company-c-headers))
#+end_src
*** company-math
    This adds math symbols and unicode things
#+BEGIN_SRC emacs-lisp
  (use-package company-math
    :config (add-to-list 'company-backends 'company-math-symbols-unicode))
#+END_SRC
*** company-box
    This package adds a frontend to company that uses a  real box
    This is nice because it works with variable pitch fonts, and can have
    colors and whatnot. Also it can extend off the side of the emacs window.
    This does require emacs 26 or above however.
    #+BEGIN_SRC emacs-lisp :tangle no
    (if (version< "26" emacs-version)
      (use-package company-box
	:hook (company-mode . company-box-mode)))
    #+END_SRC
*** company-shell
this helps us with shells, and has specific support for [[fish]]
#+BEGIN_SRC emacs-lisp
  (use-package company-shell
    :config (add-to-list 'company-backends
			 '(company-shell
			   company-fish-shell
			   company-shell-env)))
#+END_SRC
*** company-lsp
#+begin_src emacs-lisp
  (use-package company-lsp
    :after (company-irony-c-headers)
    :config
    (add-to-list 'company-backends 'company-lsp))
#+end_src
*** company flx
#+begin_src emacs-lisp
  (use-package company-flx
    :requires flx
    :config (company-flx-mode +1))
#+end_src
** neotree
#+BEGIN_SRC emacs-lisp
  (use-package neotree
    :config (setq neo-theme (if (display-graphic-p) 'icons 'arrow))
    :bind ([f8] . neotree-toggle))
#+END_SRC
** treemacs
#+begin_src emacs-lisp
  (use-package treemacs
    :chords ("\\\\" . treemacs))
#+end_src
*** treemacs evil
#+begin_src emacs-lisp
(use-package treemacs-evil)
#+end_src
*** treemacs projectile
#+begin_src emacs-lisp
  (use-package treemacs-projectile
    :chords ("\\p" . treemacs-projectile))
#+end_src

** emojify
#+begin_src emacs-lisp
(use-package emojify)
#+end_src
** all the icons
#+BEGIN_SRC emacs-lisp
  (use-package all-the-icons)
#+END_SRC
*** all the icons dired 
#+begin_src emacs-lisp
  (use-package all-the-icons-dired)
#+end_src
*** all the icons ivy
    [[ivy]]
    #+BEGIN_SRC emacs-lisp
      (use-package all-the-icons-ivy
	:config (all-the-icons-ivy-setup))
    #+END_SRC
** mode icons
#+begin_src emacs-lisp
  (use-package mode-icons
    :config (mode-icons-mode))
#+end_src
** flx
#+begin_src emacs-lisp
(use-package flx)
#+end_src

** git
#+BEGIN_SRC emacs-lisp
(use-package git)
#+END_SRC
** powerline
#+begin_src emacs-lisp
  (use-package powerline)
#+end_src
*** spaceline
#+BEGIN_SRC emacs-lisp
  (use-package spaceline
    :config (spaceline-spacemacs-theme))
#+END_SRC
** flycheck
#+BEGIN_SRC emacs-lisp
  (use-package flycheck
    :config (global-flycheck-mode))
#+END_SRC
*** flycheck-irony
#+begin_src emacs-lisp
  (use-package flycheck-irony
    :hook (flycheck-mode . flycheck-irony-setup))
#+end_src
*** flycheck-julia
    see also [[julia]]
#+BEGIN_SRC emacs-lisp
  (use-package flycheck-julia
    :config (flycheck-julia-setup))
#+END_SRC
** paradox
   Paradox is a nicer package list for package.el
   #+BEGIN_SRC emacs-lisp
     (use-package paradox)
   #+END_SRC
** magit
#+BEGIN_SRC emacs-lisp
(use-package magit)
#+END_SRC
** docker
#+BEGIN_SRC emacs-lisp
  (use-package docker)
  (use-package docker-tramp)
#+END_SRC
** kubernetes
#+BEGIN_SRC emacs-lisp
  (use-package kubernetes
    :commands (kubernetes-overview))

  (use-package kubernetes-evil
    :after kubernetes)
#+END_SRC
** spacemacs-theme
#+BEGIN_SRC emacs-lisp
  (use-package spacemacs-theme
    :no-require t)
#+END_SRC
** sr-speedbar
#+BEGIN_SRC emacs-lisp
(use-package sr-speedbar)
#+END_SRC
** ecb (emacs-code-browser)
#+begin_src emacs-lisp
  (use-package ecb)
  #+end_src
** projectile-speedbar
#+begin_src emacs-lisp
  (use-package projectile-speedbar
    :bind (:map evil-normal-state-map
                ("gop" . projectile-speedbar-open-current-buffer-in-tree)))
#+end_src
** persp-mode 
#+begin_src emacs-lisp
  (use-package persp-mode
    :config (persp-mode 1))
#+end_src
** editorconfig
Editorconfig is a package to configure a wide variety of editors
more information at [[https://editorconfig.org/]]
#+begin_src emacs-lisp
  (use-package editorconfig
    :config (editorconfig-mode 1))
#+end_src

** twittering (twitter mode)
#+begin_src emacs-lisp 
(use-package twittering-mode)
#+end_src
** md4rd (reddit)
I like reddit, this helps me use it even when the boss
is in the room :)
#+begin_src emacs-lisp 
(use-package md4rd)
#+end_src
** gitlab 
#+begin_src emacs-lisp
  (use-package gitlab)
#+end_src
** yasnippet 
#+begin_src emacs-lisp
  (use-package yasnippet
    :config (yas-global-mode 1))
#+end_src
** rspec-mode
see also [[ruby]]
#+begin_src emacs-lisp
  (use-package rspec-mode
    :config (rspec-install-snippets))
#+end_src
** yard-mode
#+begin_src emacs-lisp
  (use-package yard-mode
    :hook ((ruby-mode . yard-mode)
           (ruby-mode . eldoc-mode)))
#+end_src
** language server protocol 
:properties:
:custom_id: lsp-mode
:end:
This is for the language server protocol
#+begin_src emacs-lisp
  (use-package lsp-mode)
#+end_src
*** lsp-ui
#+begin_src emacs-lisp
  (use-package lsp-ui
    :hook (lsp-mode . lsp-ui-mode))
#+end_src
*** lsp-python
#+begin_src emacs-lisp
  (use-package lsp-python
    :hook (python-mode . lsp-python-enable))
#+end_src
*** lsp-ccls
#+begin_src emacs-lisp
  (use-package ccls
    :hook (c++mode . lsp-ccls-enable))
#+end_src
* language support
** markdown
#+BEGIN_SRC emacs-lisp
(use-package markdown-mode)
#+END_SRC 
** c++
#+BEGIN_SRC emacs-lisp
  (use-package irony
    :hook
    (c++-mode . irony-mode)
    (c-mode . irony-mode)
    (objc-mode . irony-mode)
    (irony-mode . irony-cdb-autosetup-compile-options))
#+END_SRC
** rpm
#+BEGIN_SRC emacs-lisp
(use-package rpm-spec-mode)
#+END_SRC
** puppet
#+begin_src emacs-lisp
  (use-package puppet-mode)
#+end_src
** salt
#+begin_src emacs-lisp
(use-package salt-mode)
#+end_src
** nim
#+begin_src emacs-lisp
  (use-package nim-mode
    :hook (nim-mode . nimsuggest-mode))
#+end_src
** fish
#+BEGIN_SRC emacs-lisp
  (use-package fish-mode)
#+END_SRC
** ruby
#+begin_src emacs-lisp
  (use-package robe
    :hook (ruby-mode . robe-mode))
  (use-package inf-ruby
    :hook (ruby-mode . inf-ruby-minor-mode))
#+end_src
*** [[rspec-mode]]
*** [[yard-mode]]
** julia
#+BEGIN_SRC emacs-lisp
  (use-package julia-mode)
#+END_SRC
*** integrations
- [[flycheck-julia]]
** haskell
#+BEGIN_SRC emacs-lisp
  (use-package haskell-mode)
  (use-package intero
    :hook (haskell-mode . intero-mode))
#+END_SRC 
** meson
#+BEGIN_SRC emacs-lisp
(use-package meson-mode)
#+END_SRC
** lisps
*** racket 
#+begin_src emacs-lisp
  (use-package racket-mode)
#+end_src
*** guile
*** 
#+BEGIN_SRC emacs-lisp
  (use-package paredit)
  (use-package geiser)
#+END_SRC
** web-mode
#+BEGIN_SRC emacs-lisp
  (use-package web-mode)
#+END_SRC
** D 
#+begin_src emacs-lisp
  (use-package d-mode)
#+end_src
** dockerfiles
#+BEGIN_SRC emacs-lisp
  (use-package dockerfile-mode)
#+END_SRC
* customizations
** variable pitch fonts
   I really like variable pitched fonts (it's why I use emacs, so we're going
   to set them up to be the default here. Note that I want to use them for
   as much as possible, including code
   #+begin_src emacs-lisp :tangle yes
     (custom-set-faces
      '(default ((t (:family "Noto Sans" :inherit variable-pitch)))))
     (custom-set-faces
      '(varible-pitch ((t (:family "Noto Sans")))))
   #+end_src
** unicode fonts
Emacs maps many unicode blocks by default, but not all of them,
we can use ~set-fontset-font~ to add fonts to the mapping.
** company fixed pitch font
while I love variable pitched fonts company has trouble with them (the completions
don't line up. Thus we are going to disable them in the company completion window.
#+begin_src emacs-lisp
  (custom-set-faces
   '(company-tooltip ((t (:inherit fixed-pitch))))) 
#+end_src
** diary file
#+BEGIN_SRC emacs-lisp

  (custom-set-variables
   '(diary-file "~/org/diary"))
#+END_SRC
** lowercase templates
org's templates are allcaps by default and I think this looks bad
#+begin_src emacs-lisp  
  (custom-set-variables
   '(org-structure-template-alist
       (quote
        (("s" "#+begin_src ?

  ,#+end_src")
      ("e" "#+begin_example
  ?
  ,#+end_example")
      ("q" "#+begin_quote
  ?
  ,#+end_quote")
      ("v" "#+begin_verse
  ?
  ,#+end_verse")
      ("v" "#+begin_verbatim
  ?
  ,#+end_verbatim")
      ("c" "#+begin_center
  ?
  ,#+end_center")
      ("c" "#+begin_comment
  ?
  ,#+end_comment")
      ("l" "#+begin_export latex
  ?
  ,#+end_export")
      ("l" "#+latex: ")
      ("h" "#+begin_export html
  ?
  ,#+end_export")
      ("h" "#+html: ")
      ("a" "#+begin_export ascii
  ?
  ,#+end_export")
      ("a" "#+ascii: ")
      ("i" "#+index: ?")
      ("i" "#+include: %file ?")))))
#+end_src
